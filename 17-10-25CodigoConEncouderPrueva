import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name = "movimiento2controlesF_ENCODER")
public class firstP2 extends LinearOpMode {

    // Motores de tracción para sistema omnidireccional
    private DcMotorEx rightFront, rightBack, leftFront, leftBack;

    // Actuadores adicionales
    private DcMotorEx motorHex; // Rotor (recolector)
    private DcMotorEx motorHex2; // Rope (ahora con encoder)
    private DcMotorEx motorUltra; // acelerator 
    private Servo servomotor1; // Recolector
    private Servo servomotor2, servomotor3; // mecanismo recolector (Extensores)

    // Variables de estado
    private boolean hexToggleForward = false;
    private boolean hexToggleReverse = false;
    private boolean ultraForward = false;
    private boolean ultraReverse = false;
    private boolean hexForward = false;
    private boolean hexReverse = false;

    private boolean prevX, prevTriangle, prevSquare, prevCircle, prevCircle2, prevSquare2;

    // Constantes
    private static final double HEX_POWER = 1.0;
    private static final double ULTRA_POWER = 1.0;
    private static final double HOLD_POWER = 0.3; // potencia para sostener
    private static final int MOVE_STEP = 500; // cantidad de ticks por movimiento

    private static final double SERVO_ADELANTE = 1.0;
    private static final double SERVO_ATRAS = 0.0;
    private static final double SERVO_PARAR = 0.5;

    @Override
    public void runOpMode() throws InterruptedException {
        // Inicialización de hardware
        rightFront = hardwareMap.get(DcMotorEx.class, "rightFront");
        rightBack = hardwareMap.get(DcMotorEx.class, "rightBack");
        leftFront = hardwareMap.get(DcMotorEx.class, "leftFront");
        leftBack = hardwareMap.get(DcMotorEx.class, "leftBack");

        motorHex = hardwareMap.get(DcMotorEx.class, "motorHex");
        motorHex2 = hardwareMap.get(DcMotorEx.class, "motorHex2");
        motorUltra = hardwareMap.get(DcMotorEx.class, "motorUltra");
        servomotor1 = hardwareMap.get(Servo.class, "servomotor1");
        servomotor2 = hardwareMap.get(Servo.class, "servomotor2");
        servomotor3 = hardwareMap.get(Servo.class, "servomotor3");

        // Configuración de dirección
        leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.REVERSE);

        // Configuración del motor Rope con encoder
        motorHex2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        motorHex2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // Servos en posición inicial
        servomotor2.setPosition(SERVO_PARAR);
        servomotor3.setPosition(SERVO_PARAR);
        servomotor1.setPosition(SERVO_PARAR);

        telemetry.addLine("[OmniWheels] Sistema listo. Pulse PLAY para iniciar.");
        telemetry.update();

        waitForStart();

        int holdPosition = 0; // posición de bloqueo

        while (opModeIsActive()) {
            // Lectura de joysticks
            float powerY = -gamepad1.left_stick_y;
            float powerX = gamepad1.left_stick_x;
            float rot = gamepad1.right_stick_x;

            // Botones
            boolean x = gamepad2.cross;
            boolean square = gamepad1.square;
            boolean triangle = gamepad2.triangle;
            boolean circle = gamepad1.circle;
            boolean rb = gamepad2.right_bumper;
            boolean lb = gamepad2.left_bumper;
            boolean dpadLeft = gamepad2.dpad_left;
            boolean dpadRight = gamepad2.dpad_right;
            boolean circle2 = gamepad2.circle;
            boolean square2 = gamepad2.square;
            float l2 = gamepad2.left_trigger;
            float r2 = gamepad2.right_trigger;

            // Movimiento omnidireccional
            float RF = powerY - powerX - rot;
            float RB = powerY + powerX - rot;
            float LF = powerY + powerX + rot;
            float LB = powerY - powerX + rot;

            rightFront.setPower(Range.clip(RF, -1, 1));
            rightBack.setPower(Range.clip(RB, -1, 1));
            leftFront.setPower(Range.clip(LF, -1, 1));
            leftBack.setPower(Range.clip(LB, -1, 1));

            // Recolector
            if (x && !prevX) {
                hexToggleForward = !hexToggleForward;
                hexToggleReverse = false;
            }
            if (triangle && !prevTriangle) {
                hexToggleReverse = !hexToggleReverse;
                hexToggleForward = false;
            }

            if (hexToggleForward) {
                motorHex.setPower(HEX_POWER);
                servomotor1.setPosition(SERVO_ADELANTE);
            } else if (hexToggleReverse) {
                motorHex.setPower(-HEX_POWER);
                servomotor1.setPosition(SERVO_ATRAS);
            } else {
                motorHex.setPower(0);
                servomotor1.setPosition(SERVO_PARAR);
            }

            // Rope con encoder
            if (dpadLeft) { // subir
                motorHex2.setTargetPosition(motorHex2.getCurrentPosition() + MOVE_STEP);
                motorHex2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                motorHex2.setPower(1.0);
            } else if (dpadRight) { // bajar
                motorHex2.setTargetPosition(motorHex2.getCurrentPosition() - MOVE_STEP);
                motorHex2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                motorHex2.setPower(1.0);
            } else if (circle2 && !prevCircle2) { // mantener posición (bloqueo)
                holdPosition = motorHex2.getCurrentPosition();
                motorHex2.setTargetPosition(holdPosition);
                motorHex2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                motorHex2.setPower(HOLD_POWER);
            } else if (!motorHex2.isBusy()) {
                motorHex2.setPower(0);
                motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            }

            // Acelerador
            if (square && !prevSquare) {
                ultraForward = !ultraForward;
                ultraReverse = false;
            }
            if (circle && !prevCircle) {
                ultraReverse = !ultraReverse;
                ultraForward = false;
            }

            if (ultraForward){ motorUltra.setPower(ULTRA_POWER);
            }else if (ultraReverse) {motorUltra.setPower(-ULTRA_POWER);
            }else {motorUltra.setPower(0.0);
            }

            // Servos extensores
            if (lb) {
            servomotor3.setPosition(SERVO_ATRAS);
            } else if (rb) {
            servomotor2.setPosition(SERVO_ADELANTE);
            } else if (l2 > 0) {
            servomotor3.setPosition(SERVO_ADELANTE);
            } else if (r2 > 0) {
            servomotor2.setPosition(SERVO_ATRAS);
            } else if (lb && rb){
            servomotor3.setPosition(SERVO_ATRAS);
            servomotor2.setPosition(SERVO_ADELANTE);
            } else if (l2 > 0 && r2 > 0) {
            servomotor3.setPosition(SERVO_ADELANTE);
            servomotor2.setPosition(SERVO_ATRAS);
            } else {
                servomotor2.setPosition(SERVO_PARAR);
                servomotor3.setPosition(SERVO_PARAR);
            }

            // Actualizar estados previos
            prevX = x;
            prevTriangle = triangle;
            prevSquare = square;
            prevCircle = circle;
            prevCircle2 = circle2;
            prevSquare2 = square2;

            // Telemetría
            telemetry.addData("MotorHex (X/Tri)", hexToggleForward ? "Adelante" : (hexToggleReverse ? "Atras" : "Detenido"));
            telemetry.addData("Rope Posición (ticks)", motorHex2.getCurrentPosition());
            telemetry.addData("Rope Target", motorHex2.getTargetPosition());
            telemetry.addData("Rope Estado", motorHex2.isBusy() ? "Moviendo" : "Quieto");
            telemetry.addData("MotorUltra", ultraForward ? "Directo" : (ultraReverse ? "Inverso" : "Detenido"));
            telemetry.addData("Servo 2", "%.2f", servomotor2.getPosition());
            telemetry.addData("Servo 3", "%.2f", servomotor3.getPosition());
            telemetry.update();
        }
    }
}
