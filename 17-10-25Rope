import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;


@TeleOp(name = "Rope")
public class firstP2 extends LinearOpMode {


    private DcMotorEx motorHex2;
  
    // Variables de estado para los motores
    private boolean hexForward = false;
    private boolean hexReverse = false; 
    
    // Variables para detección de flancos (anti-rebote)
    private boolean prevX, prevTriangle, prevSquare, prevCircle, prevCircle2, prevSquare2;

    // Constantes de potencia
    private static final double HEX2_POWER = 1.0;
    private static final double Hex_Power = 0.4;


    
    @Override
    public void runOpMode() throws InterruptedException {
        // Inicialización de hardware
        motorHex2 = hardwareMap.get(DcMotorEx.class, "motorHex2");

        // Configuración de comportamiento en cero
        motorHex2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        telemetry.addLine("[OmniWheelsTest] Sistema listo. Pulse PLAY para iniciar.");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            
            // Lectura de botones
            boolean dpadLeft = gamepad2.dpad_left;
            boolean dpadRight = gamepad2.dpad_right;
            boolean circle2 = gamead2.circle;
            boolean square2 = gamepad2.square;

            //Rope
            if (dpadLeft) {
                motorHex2.setPower(HEX2_POWER);
            } else if (dpadRight) {
                motorHex2.setPower(-HEX2_POWER);
            } else {
                motorHex2.setPower(0.0);
            }

            if (circle2 && !prevCircle2){
                if(hexForward){
                    hexForward = false;
                } else {
                    hexForward = true;
                    hexReverse = false;
                }
            }
            if (square2 && !prevSquare2){
                if(hexReverse){
                    hexReverse = false;
                } else {
                    hexReverse = true;
                    hexForward = false;
                }
            }
            if (hexForward){
                motorHex2.setPower(Hex_Power);
            } else if (hexReverse){
                motorHex2.setPower(-Hex_Power);
            } else{
                motorHex2.setPower(0.0);
            }

            
            
            prevX = x;
            prevTriangle = triangle;
            prevSquare = square;
            prevCircle = circle;

            
            telemetry.addData("MotorHex2 (Flechas)", dpadLeft ? "Adelante" : (dpadRight ? "Atras" : "Detenido"));
            telemetry.update();
        }
    }
}
