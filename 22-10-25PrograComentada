//  Autor: Team Guatemala
//------------------------

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

// Anotación para que aparezca en el Driver Hub
@TeleOp(name = "Movimiento 2 Controles", group = "Competition")
public class firstP2 extends LinearOpMode {

    //Declaración de hardware

    // Motores de tracción (omnidireccional)
    private DcMotorEx rightFront, rightBack, leftFront, leftBack;

    // Actuadores de mecanismos
    private DcMotorEx motorHex;   // Motor del recolector
    private DcMotorEx motorHex2;  // Motor del rope (usa encoder)
    private DcMotorEx motorUltra; // Motor del acelerador

    // Servomotores
    private Servo servomotor1; // Servo del recolector
    private Servo servomotor2; // Extensor derecho
    private Servo servomotor3; // Extensor izquierdo

    //Variables de estado

    // Estados lógicos (para toggles/encendido-apagado)
    private boolean hexForward = false;
    private boolean hexReverse = false;
    private boolean ultraForward = false;
    private boolean ultraReverse = false;
    private boolean ropeHoldActive = false; // Bloqueo del rope

    // Anti-rebote: evita activar funciones repetidamente con una sola pulsación
    private boolean prevX, prevTriangle, prevSquare, prevCircle, prevCircle2;

    //Constantes

    private static final double HEX_POWER = 1.0;      // Potencia del recolector
    private static final double ULTRA_POWER = 1.0;    // Potencia del acelerador
    private static final double HOLD_POWER = 0.45;    // Fuerza para mantener posición del rope

    // Posiciones para los servos
    private static final double SERVO_ADELANTE = 1.0;//Adelante
    private static final double SERVO_ATRAS = 0.0;//Atras 
    private static final double SERVO_PARAR = 0.5;//Parar

    // Guarda la posición actual del rope cuando se bloquea
    private int holdPosition = 0;


    //Método principal
    @Override
    public void runOpMode() throws InterruptedException {

        //Inicialización

        // Mapear los nombres de hardware (de la configuración en el Driver Hub)
        rightFront = hardwareMap.get(DcMotorEx.class, "rightFront");
        rightBack = hardwareMap.get(DcMotorEx.class, "rightBack");
        leftFront = hardwareMap.get(DcMotorEx.class, "leftFront");
        leftBack = hardwareMap.get(DcMotorEx.class, "leftBack");

        motorHex = hardwareMap.get(DcMotorEx.class, "motorHex");
        motorHex2 = hardwareMap.get(DcMotorEx.class, "motorHex2");
        motorUltra = hardwareMap.get(DcMotorEx.class, "motorUltra");

        servomotor1 = hardwareMap.get(Servo.class, "servomotor1");
        servomotor2 = hardwareMap.get(Servo.class, "servomotor2");
        servomotor3 = hardwareMap.get(Servo.class, "servomotor3");

        // Los motores del lado izquierdo deben invertirse para que todos giren en la misma dirección
        leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.REVERSE);

        // Configurar el rope (motor con encoder)
        motorHex2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); // se frena al soltar
        motorHex2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Servos en posición neutra al inicio
        servomotor1.setPosition(SERVO_PARAR);
        servomotor2.setPosition(SERVO_PARAR);
        servomotor3.setPosition(SERVO_PARAR);

        // Mensaje en la pantalla del Driver Hub
        telemetry.addLine("[Sistema listo] Pulse PLAY para iniciar.");
        telemetry.update();

        // Espera hasta que el usuario pulse PLAY
        waitForStart();

        //Bucle principal
        while (opModeIsActive()) {

            //Movimiento Omnidireccional(josticks gamepad 1 )

            float powerY = -gamepad1.left_stick_y; // Avanzar / retroceder
            float powerX = gamepad1.left_stick_x;  // Movimiento lateral
            float rot = gamepad1.right_stick_x;    // Rotación

            // Combinaciones para ruedas mecanum/omni
            float RF = powerY - powerX - rot; // Rueda delantera derecha
            float RB = powerY + powerX - rot; // Rueda trasera derecha
            float LF = powerY + powerX + rot; // Rueda delantera izquierda
            float LB = powerY - powerX + rot; // Rueda trasera izquierda

            // Asignar potencia a cada rueda (limitando entre -1 y 1)
            rightFront.setPower(Range.clip(RF, -1, 1));
            rightBack.setPower(Range.clip(RB, -1, 1));
            leftFront.setPower(Range.clip(LF, -1, 1));
            leftBack.setPower(Range.clip(LB, -1, 1));

           //Recolector (gamepad2: x y triángulo)
            boolean x = gamepad2.cross;
            boolean triangle = gamepad2.triangle;

            // Alterna la dirección con un toque (toggle/encendido-apagado)
            if (x && !prevX) {
                hexForward = !hexForward;
                hexReverse = false;
            } else if (triangle && !prevTriangle) {
                hexReverse = !hexReverse;
                hexForward = false;
            }

            // Ejecutar según estado
            if (hexForward) {
                motorHex.setPower(HEX_POWER);//Sistema recolector girando en sentido horario
                servomotor1.setPosition(SERVO_ADELANTE);
            } else if (hexReverse) {
                motorHex.setPower(-HEX_POWER);//Sistema recolector girando en sentido anti-horario
                servomotor1.setPosition(SERVO_ATRAS);
            } else {
                motorHex.setPower(0);//Permanecer en estado neutro
                servomotor1.setPosition(SERVO_PARAR);
            }

            //Rope con encouder (gamepad 2; D-pad y circulo)
            boolean dpadLeft = gamepad2.dpad_left;
            boolean dpadRight = gamepad2.dpad_right;
            boolean circle2 = gamepad2.circle;

            // Modo de sujeción (bloqueo de posición)
            if (circle2 && !prevCircle2) {
                ropeHoldActive = !ropeHoldActive;

                if (ropeHoldActive) {
                    // Guardar posición actual y mantenerla
                    holdPosition = motorHex2.getCurrentPosition();
                    motorHex2.setTargetPosition(holdPosition);
                    motorHex2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    motorHex2.setPower(HOLD_POWER);
                } else {
                    // Liberar control manual
                    motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    motorHex2.setPower(0);
                }
            }

            // Control manual del rope (solo si no está en modo hold)
            if (!ropeHoldActive) {
                if (dpadLeft) { // Subir
                    motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    motorHex2.setPower(1.0);
                } else if (dpadRight) { // Bajar
                    motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    motorHex2.setPower(-1.0);
                } else {
                    motorHex2.setPower(0);
                }
            } else {
                // Mantener posición bloqueada
                motorHex2.setTargetPosition(holdPosition);
                motorHex2.setPower(HOLD_POWER);
            }

            //Acelerador (gamepad 1: cuadrado y circulo)

            boolean square = gamepad1.square;
            boolean circle = gamepad1.circle;
            //Alternar la dirección
            if (square && !prevSquare) {
                ultraForward = !ultraForward;
                ultraReverse = false;
            } else if (circle && !prevCircle) {
                ultraReverse = !ultraReverse;
                ultraForward = false;
            }

            // Activar según dirección
            if (ultraForward)
                motorUltra.setPower(ULTRA_POWER);
            else if (ultraReverse)
                motorUltra.setPower(-ULTRA_POWER);
            else
                motorUltra.setPower(0);

            //Servos extensores (gamepad 2: lb, rb, l2 y r2)
            boolean lb = gamepad2.left_bumper;
            boolean rb = gamepad2.right_bumper;
            float l2 = gamepad2.left_trigger;
            float r2 = gamepad2.right_trigger;

            // Combinaciones posibles de extensión y retracción
            if (lb) {//Girar solo movotor izquierdo-Sentio horario
                servomotor3.setPosition(SERVO_ATRAS);
            } else if (rb) {//Girar solo motor derecho-Sentido horario
                servomotor2.setPosition(SERVO_ADELANTE);
            } else if (l2 > 0) {//Girar solo motor izquierdo-Sentido anti-horario
                servomotor3.setPosition(SERVO_ADELANTE);
            } else if (r2 > 0) {//Girar solo motor derecho-Sentido anti-horario
                servomotor2.setPosition(SERVO_ATRAS);
            } else if (lb && rb) {//Girar al mismo tiempo hacia adelante
                servomotor3.setPosition(SERVO_ATRAS);
                servomotor2.setPosition(SERVO_ADELANTE);
            } else if (l2 > 0 && r2 > 0) {//Girar al mismo tiempo hacia atrás 
                servomotor3.setPosition(SERVO_ADELANTE);
                servomotor2.setPosition(SERVO_ATRAS);
            } else {
                servomotor2.setPosition(SERVO_PARAR);
                servomotor3.setPosition(SERVO_PARAR);
            }

            //Telemetría, mensajes en el Driver Hub

            telemetry.addData("Hex Rotor", hexForward ? "→ Adelante" : (hexReverse ? "← Atrás" : "Parado"));
            telemetry.addData("Rope Pos (ticks)", motorHex2.getCurrentPosition());
            telemetry.addData("Rope Target", motorHex2.getTargetPosition());
            telemetry.addData("Hold", ropeHoldActive ? "Activado" : "Libre");
            telemetry.addData("Acelerador", ultraForward ? "→ Directo" : (ultraReverse ? "← Inverso" : "Parado"));
            telemetry.addData("Servo2", "%.2f", servomotor2.getPosition());
            telemetry.addData("Servo3", "%.2f", servomotor3.getPosition());
            telemetry.update();

            // Guardar estados previos (anti-rebote)
            prevX = x;
            prevTriangle = triangle;
            prevSquare = square;
            prevCircle = circle;
            prevCircle2 = circle2;
        }
    }
}
