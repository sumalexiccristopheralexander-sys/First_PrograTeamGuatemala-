import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;



@TeleOp(name = "movimiento2controlesF")
public class firstP2 extends LinearOpMode {

    // Motores de tracción para sistema omnidireccional
    private DcMotorEx rightFront, rightBack, leftFront, leftBack;

    // Actuadores adicionales
    private DcMotorEx motorHex;
    private DcMotorEx motorHex2;
    private DcMotorEx motorUltra;
    private Servo servomotor1;
    private Servo servomotor2, servomotor3;

    // Variables de estado para los motores
    private boolean hexToggleForward = false;
    private boolean hexToggleReverse = false;
    private boolean ultraForward = false;
    private boolean ultraReverse = false;
    private boolean hexForward = false;
    private boolean hexReverse = false; 
    
    // Variables para detección de flancos (anti-rebote)
    private boolean prevX, prevTriangle, prevSquare, prevCircle, prevCircle2, prevSquare2;

    // Constantes de potencia
    private static final double HEX_POWER = 1.0;
    private static final double HEX2_POWER = 1.0;
    private static final double HEX_STAT = 0;
    private static final double ULTRA_POWER = 1.0;
    private static final double SERVO_CONTINUOUS_POWER = 1.0;

    private static final double Hex_Power = 0.4;

    
    //Posicion servos (adelante y atras)
    private static final double SERVO_ADELANTE = 1.0;
    private static final double SERVO_ATRAS = 0.0;
    private static final double SERVO_PARAR = 0.5;

    
    @Override
    public void runOpMode() throws InterruptedException {
        // Inicialización de hardware
        rightFront = hardwareMap.get(DcMotorEx.class, "rightFront");
        rightBack = hardwareMap.get(DcMotorEx.class, "rightBack");
        leftFront = hardwareMap.get(DcMotorEx.class, "leftFront");
        leftBack = hardwareMap.get(DcMotorEx.class, "leftBack");

        motorHex = hardwareMap.get(DcMotorEx.class, "motorHex");
        motorHex2 = hardwareMap.get(DcMotorEx.class, "motorHex2");
        motorUltra = hardwareMap.get(DcMotorEx.class, "motorUltra");
        servomotor1 = hardwareMap.get(Servo.class, "servomotor1"); 
        servomotor2 = hardwareMap.get(Servo.class, "servomotor2");
        servomotor3 = hardwareMap.get(Servo.class, "servomotor3");

        // Configuración de dirección
        leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.REVERSE);

        // Iniciar servos
        servomotor1.setPosition(SERVO_PARAR);
        servomotor2.setPosition(SERVO_PARAR);
        servomotor3.setPosition(SERVO_PARAR);


        telemetry.addLine("[OmniWheelsTest] Sistema listo. Pulse PLAY para iniciar.");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            // Lectura de joysticks
            float powerY = -gamepad1.left_stick_y;
            float powerX = gamepad1.left_stick_x;
            float rot = gamepad1.right_stick_x;

            // Lectura de botones
            boolean x = gamepad2.cross;
            boolean square = gamepad1.square;
            boolean triangle = gamepad2.triangle;
            boolean circle = gamepad1.circle;
            boolean rb = gamepad2.right_bumper;
            boolean lb = gamepad2.left_bumper;
            boolean dpadLeft = gamepad2.dpad_left;
            boolean dpadRight = gamepad2.dpad_right;
            boolean circle2 = gamepad2.circle;
            boolean square2 = gamepad2.square;
            float l2 = gamepad2.left_trigger;
            float r2 = gamepad2.right_trigger;


            // Lógica movimiento omnidireccional
            float RF = powerY - powerX - rot;
            float RB = powerY + powerX - rot;
            float LF = powerY + powerX + rot;
            float LB = powerY - powerX + rot;

            rightFront.setPower(Range.clip(RF, -1, 1));
            rightBack.setPower(Range.clip(RB, -1, 1));
            leftFront.setPower(Range.clip(LF, -1, 1));
            leftBack.setPower(Range.clip(LB, -1, 1));

            // Control de motorHex y servomotor1 
            if (x && !prevX) {
                hexToggleForward = !hexToggleForward;
                hexToggleReverse = false;
            }
            if (triangle && !prevTriangle) {
                hexToggleReverse = !hexToggleReverse;
                hexToggleForward = false;
            }

            if (hexToggleForward) {
                motorHex.setPower(HEX_POWER);
                servomotor1.setPosition(SERVO_ADELANTE);
            } else if (hexToggleReverse) {
                motorHex.setPower(-HEX_POWER);
                servomotor1.setPosition(SERVO_ATRAS);
            } else {
                motorHex.setPower(0);
                servomotor1.setPosition(SERVO_PARAR);
            }

            //Rope
            if (dpadLeft) {
                motorHex2.setPower(HEX2_POWER);
            } else if (dpadRight) {
                motorHex2.setPower(-HEX2_POWER);
            } else {
                motorHex2.setPower(0.0);
            }

            if (circle2 && !prevCircle2){
                if(hexForward){
                    hexForward = false;
                } else {
                    hexForward = true;
                    hexReverse = false;
                }
            }
            if (square2 && !prevSquare2){
                if(hexReverse){
                    hexReverse = false;
                } else {
                    hexReverse = true;
                    hexForward = false;
                }
            }
            if (hexForward){
                motorHex2.setPower(Hex_Power);
            } else if (hexReverse){
                motorHex2.setPower(-Hex_Power);
            } else{
                motorHex2.setPower(0.0);
            }

            // acelerator xd
            if (square && !prevSquare) {
                if (ultraForward) {
                    ultraForward = false;
                } else {
                    ultraForward = true;
                    ultraReverse = false;
                }
            }
            if (circle && !prevCircle) {
                if (ultraReverse) {
                    ultraReverse = false;
                } else {
                    ultraReverse = true;
                    ultraForward = false;
                }
            }
            if (ultraForward) {
                motorUltra.setPower(ULTRA_POWER);
            } else if (ultraReverse) {
                motorUltra.setPower(-ULTRA_POWER);
            } else {
                motorUltra.setPower(0.0);
            }
            
            // Servo 1 y 2
            if (lb) {
                servomotor3.setPosition(SERVO_ATRAS);

            } else if (rb) {
                servomotor2.setPosition(SERVO_ADELANTE);

            } else if (l2 > 0){
                servomotor3.setPosition(SERVO_ADELANTE);
            } else if (r2 > 0){
                servomotor2.setPosition(SERVO_ATRAS);
            } else if (lb && rb){
                servomotor3.setPosition(SERVO_ATRAS);
                servomotor2.setPosition(SERVO_ADELANTE);
            } else if ((l2 && r2) > 0){
                sermovotor3.setPosition(SERVO_ADELANTE);
                servomotor2.setPosition(SERVO_ATRAS)
            }else {
                servomotor2.setPosition(SERVO_PARAR);
                servomotor3.setPosition(SERVO_PARAR);
            }
            
            
            prevX = x;
            prevTriangle = triangle;
            prevSquare = square;
            prevCircle = circle;

            
            telemetry.addData("MotorHex (X/Tri)", hexToggleForward ? "Adelante" : (hexToggleReverse ? "Atras" : "Detenido"));
            telemetry.addData("Servo 1 (Continuo)", hexToggleForward ? "Atras" : (hexToggleReverse ? "Adelante" : "Detenido"));
            telemetry.addData("MotorHex2 (Flechas)", dpadLeft ? "Adelante" : (dpadRight ? "Atras" : "Detenido"));
            telemetry.addData("MotorUltra (Cuadrado/Circulo)", ultraForward ? "Directo" : (ultraReverse ? "Inverso" : "Detenido"));
            telemetry.addData("Posición Servo 2", "%.4f", servomotor2.getPosition());
            telemetry.addData("Posición Servo 3", "%.4f", servomotor3.getPosition());
            telemetry.update();
        }
    }
}
