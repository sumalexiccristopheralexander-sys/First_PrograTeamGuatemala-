import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name = "OmniDrive_2Controllers_FullEncoder", group = "Competition")
public class FirstP2_Optimized extends LinearOpMode {

    // Motores de tracción (Omnidireccional)
    private DcMotorEx rightFront, rightBack, leftFront, leftBack;

    // Actuadores adicionales
    private DcMotorEx motorHex;     // Recolector (Rotor)
    private DcMotorEx motorHex2;    // Rope (con encoder)
    private DcMotorEx motorUltra;   // Acelerador 
    private Servo servomotor1;      // Servo del recolector
    private Servo servomotor2, servomotor3; // Extensores

    // Estados lógicos
    private boolean hexForward, hexReverse;
    private boolean ultraForward, ultraReverse;
    private boolean prevX, prevTriangle, prevSquare, prevCircle, prevCircle2;
    private boolean ropeHoldActive = false; //Estado toggle

    // Constantes
    private static final double HEX_POWER = 1.0;
    private static final double ULTRA_POWER = 1.0;
    private static final double HOLD_POWER = 0.45; // fuerza de sujeción
    private static final int MOVE_STEP = 500;

    private static final double SERVO_ADELANTE = 1.0;
    private static final double SERVO_ATRAS = 0.0;
    private static final double SERVO_PARAR = 0.5;

    private int holdPosition = 0; // Rope hold

    @Override
    public void runOpMode() throws InterruptedException {

        //Inicialización de hardware
        initHardware();

        telemetry.addLine("[OmniDrive] Sistema listo. Pulse PLAY para iniciar.");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            driveOmnidirectional();
            controlRecolector();
            controlRopeEncoder(); //incluye toggle
            controlAcelerador();
            controlServosExtensores();
            updateTelemetry();
        }
    }

    private void initHardware() {
        // Motores de tracción
        rightFront = hardwareMap.get(DcMotorEx.class, "rightFront");
        rightBack = hardwareMap.get(DcMotorEx.class, "rightBack");
        leftFront = hardwareMap.get(DcMotorEx.class, "leftFront");
        leftBack = hardwareMap.get(DcMotorEx.class, "leftBack");

        // Actuadores
        motorHex = hardwareMap.get(DcMotorEx.class, "motorHex");
        motorHex2 = hardwareMap.get(DcMotorEx.class, "motorHex2");
        motorUltra = hardwareMap.get(DcMotorEx.class, "motorUltra");

        servomotor1 = hardwareMap.get(Servo.class, "servomotor1");
        servomotor2 = hardwareMap.get(Servo.class, "servomotor2");
        servomotor3 = hardwareMap.get(Servo.class, "servomotor3");

        // Direcciones
        leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.REVERSE);

        // Rope con encoder
        motorHex2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        motorHex2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // Servos en posición neutra
        servomotor1.setPosition(SERVO_PARAR);
        servomotor2.setPosition(SERVO_PARAR);
        servomotor3.setPosition(SERVO_PARAR);
    }

        //OMNIDIRECCIONAL 
        private void driveOmnidirectional() {
        float powerY = -gamepad1.left_stick_y;
        float powerX = gamepad1.left_stick_x;
        float rot = gamepad1.right_stick_x;

        float RF = powerY - powerX - rot;
        float RB = powerY + powerX - rot;
        float LF = powerY + powerX + rot;
        float LB = powerY - powerX + rot;

        rightFront.setPower(Range.clip(RF, -1, 1));
        rightBack.setPower(Range.clip(RB, -1, 1));
        leftFront.setPower(Range.clip(LF, -1, 1));
        leftBack.setPower(Range.clip(LB, -1, 1));
    }

    //RECOLECTOR
    private void controlRecolector() {
        boolean x = gamepad2.cross;
        boolean triangle = gamepad2.triangle;

        if (x && !prevX) {
            hexForward = !hexForward;
            hexReverse = false;
        } else if (triangle && !prevTriangle) {
            hexReverse = !hexReverse;
            hexForward = false;
        }

        if (hexForward) {
            motorHex.setPower(HEX_POWER);
            servomotor1.setPosition(SERVO_ADELANTE);
        } else if (hexReverse) {
            motorHex.setPower(-HEX_POWER);
            servomotor1.setPosition(SERVO_ATRAS);
        } else {
            motorHex.setPower(0);
            servomotor1.setPosition(SERVO_PARAR);
        }

        prevX = x;
        prevTriangle = triangle;
    }

    //ROPE CON ENCODER
    private void controlRopeEncoder() {
        boolean dpadLeft = gamepad2.dpad_left;
        boolean dpadRight = gamepad2.dpad_right;
        boolean circle2 = gamepad2.circle;

        modo HOLD(brake)
        if (circle2 && !prevCircle2) {
            ropeHoldActive = !ropeHoldActive;

            if (ropeHoldActive) {
                //Activar bloqueo
                holdPosition = motorHex2.getCurrentPosition();
                motorHex2.setTargetPosition(holdPosition);
                motorHex2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                motorHex2.setPower(HOLD_POWER);
            } else {
                //Liberar bloqueo
                motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                motorHex2.setPower(0);
            }
        }

        //ROPE
        if (!ropeHoldActive) {
            if (dpadLeft) { // subir
                motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                motorHex2.setPower(1.0);
            } else if (dpadRight) { // bajar
                motorHex2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                motorHex2.setPower(-1.0);
            } else {
                motorHex2.setPower(0);
            }
        } else {
            // mantener posición bloqueada
            motorHex2.setTargetPosition(holdPosition);
            motorHex2.setPower(HOLD_POWER);
        }

        prevCircle2 = circle2;
    }

    //ACELERATOR
    private void controlAcelerador() {
        boolean square = gamepad1.square;
        boolean circle = gamepad1.circle;

        if (square && !prevSquare) {
            ultraForward = !ultraForward;
            ultraReverse = false;
        } else if (circle && !prevCircle) {
            ultraReverse = !ultraReverse;
            ultraForward = false;
        }

        if (ultraForward)
            motorUltra.setPower(ULTRA_POWER);
        else if (ultraReverse)
            motorUltra.setPower(-ULTRA_POWER);
        else
            motorUltra.setPower(0.0);

        prevSquare = square;
        prevCircle = circle;
    }

    //SERVOS EXTENSORES
    private void controlServosExtensores() {
        boolean lb = gamepad2.left_bumper;
        boolean rb = gamepad2.right_bumper;
        float l2 = gamepad2.left_trigger;
        float r2 = gamepad2.right_trigger;

        if (lb){
            servomotor3.setPosition(SERVO_ATRAS);
        }else if (rb){
            servomotor2.setPosition(SERVO_ADELANTE);
        }else if (l2 > 0){
            servomotor3.setPosition(SERVO_ADELANTE);
        }else if (r2 > 0){
            servomotor2.setPosition(SERVO_ATRAS);
        }else if (lb && rb){
            servomotor3.setPosition(SERVO_ATRAS);
            servomotor2.setPosition(SERVO_ADELANTE);
        }else if (l2 > 0 && r2 > 0){
            servomotor3.setPosition(SERVO_ADELANTE);
            servomotor2.setPosition(SERVO_ATRAS);  
        }else{
            stopServos();
        }
    }

    private void stopServos() {
        servomotor2.setPosition(SERVO_PARAR);
        servomotor3.setPosition(SERVO_PARAR);
    }

    //TELEMETRÍA
    private void updateTelemetry() {
        telemetry.addData("Hex Rotor", hexForward ? "→ Adelante" : (hexReverse ? "← Atrás" : "Parado"));
        telemetry.addData("Rope Pos (ticks)", motorHex2.getCurrentPosition());
        telemetry.addData("Rope Target", motorHex2.getTargetPosition());
        telemetry.addData("Hold", ropeHoldActive ? " Activado" : " Libre");
        telemetry.addData("Acelerador", ultraForward ? "→ Directo" : (ultraReverse ? "← Inverso" : "Parado"));
        telemetry.addData("Servo2", "%.2f", servomotor2.getPosition());
        telemetry.addData("Servo3", "%.2f", servomotor3.getPosition());
        telemetry.update();
    }
}
